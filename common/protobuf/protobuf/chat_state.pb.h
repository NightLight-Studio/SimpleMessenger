// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_5fstate_2eproto;
class ChatState;
struct ChatStateDefaultTypeInternal;
extern ChatStateDefaultTypeInternal _ChatState_default_instance_;
class InfoMessage;
struct InfoMessageDefaultTypeInternal;
extern InfoMessageDefaultTypeInternal _InfoMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatState* Arena::CreateMaybeMessage<::ChatState>(Arena*);
template<> ::InfoMessage* Arena::CreateMaybeMessage<::InfoMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class InfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfoMessage) */ {
 public:
  inline InfoMessage() : InfoMessage(nullptr) {}
  ~InfoMessage() override;
  explicit constexpr InfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoMessage(const InfoMessage& from);
  InfoMessage(InfoMessage&& from) noexcept
    : InfoMessage() {
    *this = ::std::move(from);
  }

  inline InfoMessage& operator=(const InfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoMessage& operator=(InfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoMessage* internal_default_instance() {
    return reinterpret_cast<const InfoMessage*>(
               &_InfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InfoMessage& a, InfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoMessage* New() const final {
    return new InfoMessage();
  }

  InfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfoMessage";
  }
  protected:
  explicit InfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:InfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ChatState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatState) */ {
 public:
  inline ChatState() : ChatState(nullptr) {}
  ~ChatState() override;
  explicit constexpr ChatState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatState(const ChatState& from);
  ChatState(ChatState&& from) noexcept
    : ChatState() {
    *this = ::std::move(from);
  }

  inline ChatState& operator=(const ChatState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatState& operator=(ChatState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatState* internal_default_instance() {
    return reinterpret_cast<const ChatState*>(
               &_ChatState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatState& a, ChatState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatState* New() const final {
    return new ChatState();
  }

  ChatState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatState";
  }
  protected:
  explicit ChatState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 3,
    kUserIdFieldNumber = 2,
    kNtTypeFieldNumber = 1,
  };
  // repeated .InfoMessage info_message = 3;
  int info_message_size() const;
  private:
  int _internal_info_message_size() const;
  public:
  void clear_info_message();
  ::InfoMessage* mutable_info_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoMessage >*
      mutable_info_message();
  private:
  const ::InfoMessage& _internal_info_message(int index) const;
  ::InfoMessage* _internal_add_info_message();
  public:
  const ::InfoMessage& info_message(int index) const;
  ::InfoMessage* add_info_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoMessage >&
      info_message() const;

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 nt_type = 1;
  void clear_nt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 nt_type() const;
  void set_nt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nt_type() const;
  void _internal_set_nt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoMessage > info_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoMessage

// int64 user_id = 1;
inline void InfoMessage::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InfoMessage::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InfoMessage::user_id() const {
  // @@protoc_insertion_point(field_get:InfoMessage.user_id)
  return _internal_user_id();
}
inline void InfoMessage::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void InfoMessage::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:InfoMessage.user_id)
}

// string name = 2;
inline void InfoMessage::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InfoMessage::name() const {
  // @@protoc_insertion_point(field_get:InfoMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InfoMessage.name)
}
inline std::string* InfoMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:InfoMessage.name)
  return _s;
}
inline const std::string& InfoMessage::_internal_name() const {
  return name_.Get();
}
inline void InfoMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoMessage::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoMessage::release_name() {
  // @@protoc_insertion_point(field_release:InfoMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:InfoMessage.name)
}

// string message = 3;
inline void InfoMessage::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& InfoMessage::message() const {
  // @@protoc_insertion_point(field_get:InfoMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InfoMessage.message)
}
inline std::string* InfoMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:InfoMessage.message)
  return _s;
}
inline const std::string& InfoMessage::_internal_message() const {
  return message_.Get();
}
inline void InfoMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoMessage::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoMessage::release_message() {
  // @@protoc_insertion_point(field_release:InfoMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:InfoMessage.message)
}

// -------------------------------------------------------------------

// ChatState

// int32 nt_type = 1;
inline void ChatState::clear_nt_type() {
  nt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatState::_internal_nt_type() const {
  return nt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatState::nt_type() const {
  // @@protoc_insertion_point(field_get:ChatState.nt_type)
  return _internal_nt_type();
}
inline void ChatState::_internal_set_nt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nt_type_ = value;
}
inline void ChatState::set_nt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nt_type(value);
  // @@protoc_insertion_point(field_set:ChatState.nt_type)
}

// int64 user_id = 2;
inline void ChatState::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatState::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatState::user_id() const {
  // @@protoc_insertion_point(field_get:ChatState.user_id)
  return _internal_user_id();
}
inline void ChatState::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void ChatState::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ChatState.user_id)
}

// repeated .InfoMessage info_message = 3;
inline int ChatState::_internal_info_message_size() const {
  return info_message_.size();
}
inline int ChatState::info_message_size() const {
  return _internal_info_message_size();
}
inline void ChatState::clear_info_message() {
  info_message_.Clear();
}
inline ::InfoMessage* ChatState::mutable_info_message(int index) {
  // @@protoc_insertion_point(field_mutable:ChatState.info_message)
  return info_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoMessage >*
ChatState::mutable_info_message() {
  // @@protoc_insertion_point(field_mutable_list:ChatState.info_message)
  return &info_message_;
}
inline const ::InfoMessage& ChatState::_internal_info_message(int index) const {
  return info_message_.Get(index);
}
inline const ::InfoMessage& ChatState::info_message(int index) const {
  // @@protoc_insertion_point(field_get:ChatState.info_message)
  return _internal_info_message(index);
}
inline ::InfoMessage* ChatState::_internal_add_info_message() {
  return info_message_.Add();
}
inline ::InfoMessage* ChatState::add_info_message() {
  ::InfoMessage* _add = _internal_add_info_message();
  // @@protoc_insertion_point(field_add:ChatState.info_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoMessage >&
ChatState::info_message() const {
  // @@protoc_insertion_point(field_list:ChatState.info_message)
  return info_message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_5fstate_2eproto
